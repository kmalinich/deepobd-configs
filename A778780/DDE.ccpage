<?xml version="1.0" encoding="utf-8"?>
<fragment xmlns="http://www.holeschak.de/BmwDeepObd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.holeschak.de/BmwDeepObd ../BmwDeepObd.xsd">
	<page name="!PAGE_NAME" display-mode="grid" fontsize="small" gauges-portrait="2" gauges-landscape="4" logfile="DDE.log">
		<strings>
			<string name="!PAGE_NAME">DDE</string>

			<string name="label_motor_ambient_press"  >Ambient [psi]</string>
			<string name="label_motor_boost_press_act">Boost act [psi]</string>
			<string name="label_motor_boost_press_set">Boost set [psi]</string>
			<string name="label_motor_exhaust_press"  >Exhaust [psi]</string>

			<string name="label_motor_rail_press_act">Rail pressure act [bar]</string>
			<string name="label_motor_rail_press_set">Rail pressure set [bar]</string>

			<string name="label_motor_temp"           >ECT [°C]</string>
			<string name="label_motor_intake_air_temp">IAT [°C]</string>
			<string name="label_motor_ambient_temp"   >Ambient [°C]</string>
			<string name="label_motor_fuel_temp"      >Fuel [°C]</string>
			<string name="label_motor_refrig_temp"    >Refrigerant [°C]</string>
			<string name="label_motor_oil_temp"       >Oil [°C]</string>

			<string name="label_motor_air_mass"    >Air mass [kg/h]</string>
			<string name="label_motor_air_mass_act">Air mass act [mg/pass]</string>
			<string name="label_motor_air_mass_set">Air mass set [mg/pass]</string>

			<string name="label_motor_oil_press_switch">Oil pressure switch</string>

			<string name="label_exhaust_temp_before_cat"   >EGT before catalyst [°C]</string>
			<string name="label_exhaust_temp_before_filter">EGT before DPF [°C]</string>

			<string name="label_motor_part_filt_status"     >DPF regen</string>
			<string name="label_motor_part_filt_request"    >DPF regen request</string>
			<string name="label_motor_part_filt_unblocked"  >DPF regen unblock</string>
			<string name="label_motor_part_filt_dist_remain">DPF remaining distance [km]</string>
			<string name="label_motor_part_filt_dist_since" >DPF dist since regen [km]</string>

			<string name="label_motor_bat_voltage">Battery voltage [V]</string>
		</strings>

		<jobs sgbd="D_MOTOR">
			<job name="STATUS_MESSWERTBLOCK_LESEN" args_first="JA;IUBAT2;OBD_PID05_CEngDsT_tSens;ITMOT;ITOEL;ITKRS;OBD_PID10_AFS_dmSens;ILMMG;SLMMG;ITUMG;IPLAD;SPLAD;ITLAL;IPUMG;IPRDR;SPRDR;ITAVO;ITAVP1;IPDIP;IDSLRE;PFltRgn_numRgn;CoEOM_stOpModeAct;ISRBF;ISOED;PCBS_lDistanceOut" args="NEIN;IUBAT2;OBD_PID05_CEngDsT_tSens;ITMOT;ITOEL;ITKRS;OBD_PID10_AFS_dmSens;ILMMG;SLMMG;ITUMG;IPLAD;SPLAD;ITLAL;IPUMG;IPRDR;SPRDR;ITAVO;ITAVP1;IPDIP;IDSLRE;PFltRgn_numRgn;CoEOM_stOpModeAct;ISRBF;ISOED;PCBS_lDistanceOut">
				<display name="label_motor_temp"                  result="STAT_MOTORTEMPERATUR_WERT"                         grid-type="simple-gauge-square" min-value="0"    max-value="100"    />
				<display name="label_motor_intake_air_temp"       result="STAT_LADELUFTTEMPERATUR_WERT"                      grid-type="simple-gauge-square" min-value="0"    max-value="50"     />
				<display name="label_motor_ambient_temp"          result="STAT_UMGEBUNGSTEMPERATUR_WERT"                     grid-type="simple-gauge-square" min-value="0"    max-value="50"     />
				<display name="label_motor_fuel_temp"             result="STAT_KRAFTSTOFFTEMPERATUR_WERT"                    grid-type="simple-gauge-square" min-value="0"    max-value="50"     />

				<display name="label_motor_boost_press_act"       result="STAT_LADEDRUCK_WERT"                               grid-type="simple-gauge-square" min-value="500"  max-value="4045"   />
				<display name="label_motor_boost_press_set"       result="STAT_LADEDRUCK_SOLL_WERT"                          grid-type="simple-gauge-square" min-value="500"  max-value="4045"   />
				<display name="label_motor_ambient_press"         result="STAT_UMGEBUNGSDRUCK_WERT"                          grid-type="simple-gauge-square" min-value="900"  max-value="1100"   />
				<display name="label_motor_exhaust_press"         result="STAT_DIFFERENZDRUCK_UEBER_PARTIKELFILTER_WERT"     grid-type="simple-gauge-square" min-value="500"  max-value="3045"   />

				<display name="label_motor_rail_press_act"        result="STAT_RAILDRUCK_WERT"                               grid-type="simple-gauge-square" min-value="0"    max-value="500"    />
				<display name="label_motor_rail_press_set"        result="STAT_RAILDRUCK_SOLL_WERT"                          grid-type="simple-gauge-square" min-value="0"    max-value="500"    />

				<display name="label_motor_refrig_temp"           result="STAT_CEngDsT_tSens_WERT"                           grid-type="simple-gauge-square" min-value="0"    max-value="100"    />
				<display name="label_motor_oil_temp"              result="STAT_MOTOROEL_TEMPERATUR_WERT"                     grid-type="simple-gauge-square" min-value="0"    max-value="100"    />
				<display name="label_exhaust_temp_before_cat"     result="STAT_ABGASTEMPERATUR_VOR_KATALYSATOR_WERT"         grid-type="simple-gauge-square" min-value="0"    max-value="1000"   />
				<display name="label_exhaust_temp_before_filter"  result="STAT_ABGASTEMPERATUR_VOR_PARTIKELFILTER_1_WERT"    grid-type="simple-gauge-square" min-value="0"    max-value="1000"   />

				<display name="label_motor_air_mass"              result="STAT_AFS_dmSens_WERT"                              grid-type="simple-gauge-square" min-value="0"    max-value="2000"   />
				<display name="label_motor_air_mass_act"          result="STAT_LUFTMASSE_PRO_HUB_WERT"                       grid-type="simple-gauge-square" min-value="0"    max-value="2000"   />
				<display name="label_motor_air_mass_set"          result="STAT_LUFTMASSE_SOLL_WERT"                          grid-type="simple-gauge-square" min-value="0"    max-value="2000"   />

				<display name="label_motor_oil_press_switch"      result="STAT_OELDRUCKSCHALTER_EIN_WERT"                    grid-type="simple-gauge-square" min-value="0"    max-value="1"      />

				<display name="label_motor_part_filt_status"      result="STAT_CoEOM_stOpModeAct_WERT"                       grid-type="simple-gauge-square" min-value="0"    max-value="150000" />
				<display name="label_motor_part_filt_request"     result="STAT_PFltRgn_numRgn_WERT"                          grid-type="simple-gauge-square" min-value="0"    max-value="150000" />
				<display name="label_motor_part_filt_unblocked"   result="STAT_REGENERATION_BLOCKIERUNG_UND_FREIGABE_WERT"   grid-type="simple-gauge-square" min-value="0"    max-value="150000" />
				<display name="label_motor_part_filt_dist_remain" result="STAT_PCBS_lDistanceOut_WERT"                       grid-type="simple-gauge-square" min-value="0"    max-value="150000" />
				<display name="label_motor_part_filt_dist_since"  result="STAT_STRECKE_SEIT_ERFOLGREICHER_REGENERATION_WERT" grid-type="simple-gauge-square" min-value="0"    max-value="150000" />

				<display name="label_motor_bat_voltage"           result="STAT_UBATT2_WERT"                                  grid-type="simple-gauge-square" min-value="9000" max-value="18000"  />
			</job>
		</jobs>
		<code show_warnings="true">
			<![CDATA[
class PageClass {
	public string FormatResult(JobReader.PageInfo pageInfo, MultiMap<string, EdiabasNet.ResultData> resultDict, string resultName, ref Android.Graphics.Color? textColor) {
		bool found;
		double value;

		double ambient_offset = 982;
		double hpa2psi        = 68.948;
		double bar2psi        = 14.504;

		string result = string.Empty;

		switch (resultName) {
			// Battery voltage
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_UBATT2_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value / 1000);

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.Red;
				if ((value / 1000) > 10) textColor = Android.Graphics.Color.Yellow;
				if ((value / 1000) > 12) textColor = Android.Graphics.Color.White;
				if ((value / 1000) > 13) textColor = Android.Graphics.Color.Green;
				if ((value / 1000) > 15) textColor = Android.Graphics.Color.Yellow;
				if ((value / 1000) > 16) textColor = Android.Graphics.Color.Red;
				break;

			// Coolant temp
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_MOTORTEMPERATUR_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.Blue;
				if (value > 50)  textColor = Android.Graphics.Color.White;
				if (value > 70)  textColor = Android.Graphics.Color.Green;
				if (value > 85)  textColor = Android.Graphics.Color.Yellow;
				if (value > 100) textColor = Android.Graphics.Color.Red;
				break;

			// Oil temp
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_MOTOROEL_TEMPERATUR_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.Blue;
				if (value > 50)  textColor = Android.Graphics.Color.White;
				if (value > 70)  textColor = Android.Graphics.Color.Green;
				if (value > 85)  textColor = Android.Graphics.Color.Yellow;
				if (value > 100) textColor = Android.Graphics.Color.Red;
				break;

			// Fuel temp
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_KRAFTSTOFFTEMPERATUR_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.Blue;
				if (value > 10) textColor = Android.Graphics.Color.White;
				if (value > 20) textColor = Android.Graphics.Color.Green;
				if (value > 30) textColor = Android.Graphics.Color.Yellow;
				if (value > 40) textColor = Android.Graphics.Color.Red;
				break;

			// Ambient air temp
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_UMGEBUNGSTEMPERATUR_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.Blue;
				if (value > 10) textColor = Android.Graphics.Color.White;
				if (value > 20) textColor = Android.Graphics.Color.Green;
				if (value > 30) textColor = Android.Graphics.Color.Yellow;
				if (value > 40) textColor = Android.Graphics.Color.Red;
				break;

			// Intake air temp
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_LADELUFTTEMPERATUR_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.Blue;
				if (value > 10) textColor = Android.Graphics.Color.White;
				if (value > 20) textColor = Android.Graphics.Color.Green;
				if (value > 30) textColor = Android.Graphics.Color.Yellow;
				if (value > 40) textColor = Android.Graphics.Color.Red;
				break;

			// Exhaust temp before catalyst
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_ABGASTEMPERATUR_VOR_KATALYSATOR_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.Blue;
				if (value > 100) textColor = Android.Graphics.Color.White;
				if (value > 300) textColor = Android.Graphics.Color.Green;
				if (value > 500) textColor = Android.Graphics.Color.Yellow;
				if (value > 700) textColor = Android.Graphics.Color.Red;
				break;

			// Exhaust temp before filter
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_ABGASTEMPERATUR_VOR_PARTIKELFILTER_1_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.Blue;
				if (value > 100) textColor = Android.Graphics.Color.White;
				if (value > 300) textColor = Android.Graphics.Color.Green;
				if (value > 500) textColor = Android.Graphics.Color.Yellow;
				if (value > 700) textColor = Android.Graphics.Color.Red;
				break;

			// Engine refrigerant temp
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_CEngDsT_tSens_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.Blue;
				if (value > 20) textColor = Android.Graphics.Color.White;
				if (value > 40) textColor = Android.Graphics.Color.Green;
				if (value > 60) textColor = Android.Graphics.Color.Yellow;
				if (value > 80) textColor = Android.Graphics.Color.Red;
				break;

			// Air mass
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_AFS_dmSens_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,7:0.00}", value);

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.Blue;
				if (value >  300) textColor = Android.Graphics.Color.White;
				if (value >  600) textColor = Android.Graphics.Color.Green;
				if (value >  900) textColor = Android.Graphics.Color.Yellow;
				if (value > 1200) textColor = Android.Graphics.Color.Red;
				break;

			// Air mass actual
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_LUFTMASSE_PRO_HUB_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.Blue;
				if (value >  300) textColor = Android.Graphics.Color.White;
				if (value >  600) textColor = Android.Graphics.Color.Green;
				if (value >  900) textColor = Android.Graphics.Color.Yellow;
				if (value > 1200) textColor = Android.Graphics.Color.Red;
				break;

			// Air mass set point
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_LUFTMASSE_SOLL_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.Blue;
				if (value >  300) textColor = Android.Graphics.Color.White;
				if (value >  600) textColor = Android.Graphics.Color.Green;
				if (value >  900) textColor = Android.Graphics.Color.Yellow;
				if (value > 1200) textColor = Android.Graphics.Color.Red;
				break;

			// Fuel rail pressure actual
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_RAILDRUCK_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,7:0.00}", (value / bar2psi));

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.White;
				if ((value / bar2psi) > 100) textColor = Android.Graphics.Color.Blue;
				if ((value / bar2psi) > 200) textColor = Android.Graphics.Color.Green;
				if ((value / bar2psi) > 300) textColor = Android.Graphics.Color.Yellow;
				if ((value / bar2psi) > 400) textColor = Android.Graphics.Color.Red;
				break;

			// Fuel rail pressure target
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_RAILDRUCK_SOLL_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,7:0.00}", (value / bar2psi));

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.White;
				if ((value / bar2psi) > 100) textColor = Android.Graphics.Color.Blue;
				if ((value / bar2psi) > 200) textColor = Android.Graphics.Color.Green;
				if ((value / bar2psi) > 300) textColor = Android.Graphics.Color.Yellow;
				if ((value / bar2psi) > 400) textColor = Android.Graphics.Color.Red;
				break;

			// Boost pressure actual
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_LADEDRUCK_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,7:0.00}", ((value - ambient_offset) / hpa2psi));

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.White;
				if (((value - ambient_offset) / hpa2psi) > 10) textColor = Android.Graphics.Color.Blue;
				if (((value - ambient_offset) / hpa2psi) > 20) textColor = Android.Graphics.Color.Green;
				if (((value - ambient_offset) / hpa2psi) > 30) textColor = Android.Graphics.Color.Yellow;
				if (((value - ambient_offset) / hpa2psi) > 40) textColor = Android.Graphics.Color.Red;
				break;

			// Boost pressure target
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_LADEDRUCK_SOLL_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,7:0.00}", ((value - ambient_offset) / hpa2psi));

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.White;
				if (((value - ambient_offset) / hpa2psi) > 10) textColor = Android.Graphics.Color.Blue;
				if (((value - ambient_offset) / hpa2psi) > 20) textColor = Android.Graphics.Color.Green;
				if (((value - ambient_offset) / hpa2psi) > 30) textColor = Android.Graphics.Color.Yellow;
				if (((value - ambient_offset) / hpa2psi) > 40) textColor = Android.Graphics.Color.Red;
				break;

			// Exhaust back pressure
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_DIFFERENZDRUCK_UEBER_PARTIKELFILTER_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,7:0.00}", ((value - ambient_offset) / hpa2psi));

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.White;
				if (((value - ambient_offset) / hpa2psi) > 10) textColor = Android.Graphics.Color.Blue;
				if (((value - ambient_offset) / hpa2psi) > 20) textColor = Android.Graphics.Color.Green;
				if (((value - ambient_offset) / hpa2psi) > 30) textColor = Android.Graphics.Color.Yellow;
				if (((value - ambient_offset) / hpa2psi) > 40) textColor = Android.Graphics.Color.Red;
				break;

			// Oil pressure switch
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_OELDRUCKSCHALTER_EIN_WERT":
				result = ((ActivityMain.GetResultDouble(resultDict, resultName, 0, out found) > 0.5) && found) ? "1" : "0";

				if (!found) { result = string.Empty; break; }

				textColor = Android.Graphics.Color.White;
				if (result == "1") textColor = Android.Graphics.Color.Red;
				break;

			// DPF distance since regeneration
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_STRECKE_SEIT_ERFOLGREICHER_REGENERATION_WERT":
				result = string.Format(ActivityMain.Culture, "{0,6:0.0}", ActivityMain.GetResultDouble(resultDict, resultName, 0, out found) / 1000.0);

				if (!found) break;
				break;

			// DPF regeneration request
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_PFltRgn_numRgn_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = ((value > 3.5) && (value < 6.5) && found) ? "1" : "0";

				if (!found) { result = string.Empty; break; }
				break;

			// DPF regeneration status
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_CoEOM_stOpModeAct_WERT":
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = ((((int)(value + 0.5) & 0x02) != 0) && found) ? "1" : "0";
				if (!found) { result = string.Empty; break; }
				break;

			// DPF unblocked
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_REGENERATION_BLOCKIERUNG_UND_FREIGABE_WERT":
				result = ((ActivityMain.GetResultDouble(resultDict, resultName, 0, out found) < 0.5) && found) ? "1" : "0";
				if (!found) { result = string.Empty; break; }
				break;
		}

		return result;
	}
}
			]]>
		</code>
	</page>
</fragment>
