<?xml version="1.0" encoding="utf-8"?>
<fragment xmlns="http://www.holeschak.de/BmwDeepObd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.holeschak.de/BmwDeepObd BmwDeepObd.xsd">
	<page name="!PAGE_NAME" display-mode="grid" fontsize="large" gauges-portrait="2" gauges-landscape="2" logfile="MSS52DS1.log">
		<strings>
			<string name="!PAGE_NAME">DME main</string>

			<string name="!JOB#STATUS_ADD#STAT_ADD_WERT"                                      >O2 Add 1</string>
			<string name="!JOB#STATUS_ADD_2#STAT_ADD_2_WERT"                                  >O2 Add 2</string>
			<string name="!JOB#STATUS_INT#STAT_INT_WERT"                                      >O2 Int 1</string>
			<string name="!JOB#STATUS_INT_2#STAT_INT_2_WERT"                                  >O2 Int 2</string>
			<string name="!JOB#STATUS_KUEHLW_AUSL_TEMPERATUR#STAT_KUEHLW_AUSL_TEMPERATUR_WERT">Rad outlet</string>
			<string name="!JOB#STATUS_LAMBDA_MUL_1#STAT_LAMBDA_MUL_1_WERT"                    >O2 Mul 1</string>
			<string name="!JOB#STATUS_LAMBDA_MUL_2#STAT_LAMBDA_MUL_2_WERT"                    >O2 Mul 2</string>
			<string name="!JOB#STATUS_L_SONDE#STAT_L_SONDE_WERT"                              >O2 V 1</string>
			<string name="!JOB#STATUS_L_SONDE_2#STAT_L_SONDE_2_WERT"                          >O2 V 2</string>
			<string name="!JOB#STATUS_RF#STAT_RF_WERT"                                        >RF %</string>
			<string name="!JOB#STATUS_TZ1#STAT_TZ1_WERT"                                      >Ign Â°</string>
		</strings>


		<jobs sgbd="mss52ds1">

			<job name="STATUS_L_SONDE">
				<display name="!JOB#STATUS_L_SONDE#STAT_L_SONDE_WERT" result="STAT_L_SONDE_WERT" grid-type="simple-gauge-square" min-value="0" max-value="1" log_tag="STAT_L_SONDE_WERT" />
			</job>

			<!--
			<job name="STATUS_L_SONDE_2">
				<display name="!JOB#STATUS_L_SONDE_2#STAT_L_SONDE_2_WERT" result="STAT_L_SONDE_2_WERT" grid-type="simple-gauge-square" min-value="0" max-value="1" log_tag="STAT_L_SONDE_2_WERT" />
			</job>
			-->

			<job name="STATUS_ADD">
				<display name="!JOB#STATUS_ADD#STAT_ADD_WERT" result="STAT_ADD_WERT" grid-type="simple-gauge-square" min-value="0" max-value="1" log_tag="STAT_ADD_WERT" />
			</job>

			<!--
			<job name="STATUS_ADD_2">
				<display name="!JOB#STATUS_ADD_2#STAT_ADD_2_WERT" result="STAT_ADD_2_WERT" grid-type="simple-gauge-square" min-value="0" max-value="1" log_tag="STAT_ADD_2_WERT" />
			</job>
			-->

			<job name="STATUS_INT">
				<display name="!JOB#STATUS_INT#STAT_INT_WERT" result="STAT_INT_WERT" grid-type="simple-gauge-square" min-value="0.5" max-value="1.5" log_tag="STAT_INT_WERT" />
			</job>

			<!--
			<job name="STATUS_INT_2">
				<display name="!JOB#STATUS_INT_2#STAT_INT_2_WERT" result="STAT_INT_2_WERT" grid-type="simple-gauge-square" min-value="0.5" max-value="1.5" log_tag="STAT_INT_2_WERT" />
			</job>
			-->

			<job name="STATUS_LAMBDA_MUL_1">
				<display name="!JOB#STATUS_LAMBDA_MUL_1#STAT_LAMBDA_MUL_1_WERT" result="STAT_LAMBDA_MUL_1_WERT" grid-type="simple-gauge-square" min-value="0.75" max-value="1.25" log_tag="STAT_LAMBDA_MUL_1_WERT" />
			</job>

			<!--
			<job name="STATUS_LAMBDA_MUL_2">
				<display name="!JOB#STATUS_LAMBDA_MUL_2#STAT_LAMBDA_MUL_2_WERT" result="STAT_LAMBDA_MUL_2_WERT" grid-type="simple-gauge-square" min-value="0.75" max-value="1.25" log_tag="STAT_LAMBDA_MUL_2_WERT" />
			</job>
			-->

			<job name="STATUS_KUEHLW_AUSL_TEMPERATUR">
				<display name="!JOB#STATUS_KUEHLW_AUSL_TEMPERATUR#STAT_KUEHLW_AUSL_TEMPERATUR_WERT" result="STAT_KUEHLW_AUSL_TEMPERATUR_WERT" grid-type="simple-gauge-square" min-value="0" max-value="100" log_tag="STAT_KUEHLW_AUSL_TEMPERATUR_WERT" />
			</job>

		</jobs>

		<code show_warnings="true">
			<![CDATA[
				class PageClass {
	public static Android.Graphics.Color intRgb(double r, double g, double b) {
		return Android.Graphics.Color.Rgb((int) r, (int) g, (int) b);
	}

	public string FormatResult(JobReader.PageInfo pageInfo, MultiMap<string, EdiabasNet.ResultData> resultDict, string resultName, ref Android.Graphics.Color? textColor) {
		bool found;
		double value;

		double ambient_offset = 982;
		double hpa2psi        = 68.948;
		double bar2psi        = 14.504;

		string result = string.Empty;

		switch (resultName) {
			case "STATUS_TZ1#STAT_TZ1_WERT": // Ignition timing
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (value > 64) {
					value = value - 6553;
				}

				textColor = intRgb(241, 196, 15);
				break;

			case "STATUS_RF#STAT_RF_WERT": // RF %
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) break;

				if (value > 100) { textColor = intRgb(255,   0,   0); break; }
				if (value == 50) { textColor = intRgb(0,   255,   0); break; }
				if (value ==  0) { textColor = intRgb(0,     0, 255); break; }

				if (value < 50) {
					textColor = intRgb(0, (value * 5.1), (255 - (value * 5.1)));
					break;
				}

				textColor = intRgb((value * 5.1), (255 - (value * 5.1)), 0);
				break;


			case "STATUS_L_SONDE#STAT_L_SONDE_WERT":
			case "STATUS_L_SONDE_2#STAT_L_SONDE_2_WERT": // Lambda sensor voltage
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) break;

				if (value  > 1.00) { textColor = intRgb(255,   0,   0); break; }
				if (value == 0.50) { textColor = intRgb(0,   255,   0); break; }
				if (value == 0.00) { textColor = intRgb(0,     0, 255); break; }

				if (value < 0.50) {
					textColor = intRgb(0, (value * 510), (255 - (value * 510)));
					break;
				}

				textColor = intRgb((value * 510), (255 - (value * 510)), 0);
				break;

			case "STATUS_ADD#STAT_ADD_WERT":
			case "STATUS_ADD_2#STAT_ADD_2_WERT": // Lambda additive
				value = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);

				if (value > 64) {
					value = value - 131.072;
				}

				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) break;

				if (value >  30) { textColor = Android.Graphics.Color.Red;    break; }
				if (value >  20) { textColor = Android.Graphics.Color.Yellow; break; }
				if (value >  10) { textColor = Android.Graphics.Color.Green;  break; }
				if (value >   0) { textColor = Android.Graphics.Color.White;  break; }
				if (value > -10) { textColor = Android.Graphics.Color.Green;  break; }
				if (value > -20) { textColor = Android.Graphics.Color.Yellow; break; }

				textColor = Android.Graphics.Color.Red;
				break;

			case "STATUS_INT#STAT_INT_WERT":
			case "STATUS_INT_2#STAT_INT_2_WERT": // Lambda integral
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) break;

				if (value > 0.90) { textColor = Android.Graphics.Color.Yellow; break; }
				if (value > 0.99) { textColor = Android.Graphics.Color.Green;  break; }
				if (value > 1.10) { textColor = Android.Graphics.Color.Yellow; break; }
				if (value > 1.20) { textColor = Android.Graphics.Color.Red;    break; }

				textColor = Android.Graphics.Color.Red;
				break;

			case "STATUS_LAMBDA_MUL_1#STAT_LAMBDA_MUL_1_WERT":
			case "STATUS_LAMBDA_MUL_2#STAT_LAMBDA_MUL_2_WERT": // Lambda multiplicative
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) break;

				if (value > 0.90) { textColor = Android.Graphics.Color.Yellow; break; }
				if (value > 0.99) { textColor = Android.Graphics.Color.Green;  break; }
				if (value > 1.10) { textColor = Android.Graphics.Color.Yellow; break; }
				if (value > 1.20) { textColor = Android.Graphics.Color.Red;    break; }

				textColor = Android.Graphics.Color.Red;
				break;


			case "STATUS_KUEHLW_AUSL_TEMPERATUR#STAT_KUEHLW_AUSL_TEMPERATUR_WERT": // Radiator outlet temp
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) break;

				if (value > 100) { textColor = intRgb(255,   0,   0); break; }
				if (value == 50) { textColor = intRgb(0,   255,   0); break; }
				if (value ==  0) { textColor = intRgb(0,     0, 255); break; }

				if (value < 50) {
					textColor = intRgb(0, (value * 5.1), (255 - (value * 5.1)));
					break;
				}

				textColor = intRgb((value * 5.1), (255 - (value * 5.1)), 0);
				break;

			case "STATUS_MESSWERTBLOCK_LESEN#STAT_MOTORTEMPERATUR_WERT":
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_MOTOROEL_TEMPERATUR_WERT":
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_CEngDsT_tSens_WERT": // Coolant/oil/refrigerant temp
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) break;

				if (value > 100) { textColor = intRgb(255,   0,   0); break; }
				if (value == 50) { textColor = intRgb(0,   255,   0); break; }
				if (value ==  0) { textColor = intRgb(0,     0, 255); break; }

				if (value < 50) {
					textColor = intRgb(0, (value * 5.1), (255 - (value * 5.1)));
					break;
				}

				textColor = intRgb((value * 5.1), (255 - (value * 5.1)), 0);
				break;

			case "STATUS_MESSWERTBLOCK_LESEN#STAT_KRAFTSTOFFTEMPERATUR_WERT":
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_UMGEBUNGSTEMPERATUR_WERT":
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_LADELUFTTEMPERATUR_WERT": // Ambient air/intake air/fuel temp
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) break;

				// 12.75 RGB multiplier reasoning:
				// Max temp = 40
				// 40 / 0.4 = 100
				// 5.1 / 0.4 = 12.75

				if (value >  40) { textColor = intRgb(255,   0,   0); break; }
				if (value == 20) { textColor = intRgb(0,   255,   0); break; }
				if (value ==  0) { textColor = intRgb(0,     0, 255); break; }

				if (value < 20) {
					textColor = intRgb(0, (value * 12.75), (255 - (value * 12.75)));
					break;
				}

				textColor = intRgb((value * 12.75), (255 - (value * 12.75)), 0);
				break;

			case "STATUS_MESSWERTBLOCK_LESEN#STAT_ABGASTEMPERATUR_VOR_KATALYSATOR_WERT":
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_ABGASTEMPERATUR_VOR_PARTIKELFILTER_1_WERT": // Exhaust temp
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) break;

				textColor = Android.Graphics.Color.Blue;
				if (value > 100) textColor = Android.Graphics.Color.White;
				if (value > 300) textColor = Android.Graphics.Color.Green;
				if (value > 500) textColor = Android.Graphics.Color.Yellow;
				if (value > 700) textColor = Android.Graphics.Color.Red;
				break;

			case "STATUS_MESSWERTBLOCK_LESEN#STAT_AFS_dmSens_WERT":
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_LUFTMASSE_PRO_HUB_WERT":
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_LUFTMASSE_SOLL_WERT": // Air mass
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value);

				if (!found) break;

				textColor = Android.Graphics.Color.Blue;
				if (value >  300) textColor = Android.Graphics.Color.White;
				if (value >  600) textColor = Android.Graphics.Color.Green;
				if (value >  900) textColor = Android.Graphics.Color.Yellow;
				if (value > 1200) textColor = Android.Graphics.Color.Red;
				break;

			case "STATUS_MESSWERTBLOCK_LESEN#STAT_RAILDRUCK_WERT":
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_RAILDRUCK_SOLL_WERT": // Fuel rail pressure
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,7:0.00}", (value / bar2psi));

				if (!found) break;

				textColor = Android.Graphics.Color.White;
				if ((value / bar2psi) > 100) textColor = Android.Graphics.Color.Blue;
				if ((value / bar2psi) > 200) textColor = Android.Graphics.Color.Green;
				if ((value / bar2psi) > 300) textColor = Android.Graphics.Color.Yellow;
				if ((value / bar2psi) > 400) textColor = Android.Graphics.Color.Red;
				break;

			case "STATUS_MESSWERTBLOCK_LESEN#STAT_LADEDRUCK_WERT":
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_LADEDRUCK_SOLL_WERT":
			case "STATUS_MESSWERTBLOCK_LESEN#STAT_DIFFERENZDRUCK_UEBER_PARTIKELFILTER_WERT": // Boost pressure/exhaust back pressure
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,7:0.00}", ((value - ambient_offset) / hpa2psi));

				if (!found) break;

				textColor = Android.Graphics.Color.White;
				if (((value - ambient_offset) / hpa2psi) > 10) textColor = Android.Graphics.Color.Blue;
				if (((value - ambient_offset) / hpa2psi) > 20) textColor = Android.Graphics.Color.Green;
				if (((value - ambient_offset) / hpa2psi) > 30) textColor = Android.Graphics.Color.Yellow;
				if (((value - ambient_offset) / hpa2psi) > 40) textColor = Android.Graphics.Color.Red;
				break;

			case "STATUS_MESSWERTBLOCK_LESEN#STAT_UBATT2_WERT": // Battery voltage
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.00}", value / 1000);

				if (!found) break;

				textColor = Android.Graphics.Color.Red;
				if ((value / 1000) > 10) textColor = Android.Graphics.Color.Yellow;
				if ((value / 1000) > 12) textColor = Android.Graphics.Color.White;
				if ((value / 1000) > 13) textColor = Android.Graphics.Color.Green;
				if ((value / 1000) > 15) textColor = Android.Graphics.Color.Yellow;
				if ((value / 1000) > 16) textColor = Android.Graphics.Color.Red;
				break;

			case "STATUS_MESSWERTBLOCK_LESEN#STAT_OELDRUCKSCHALTER_EIN_WERT": // Oil pressure switch
				result = ((ActivityMain.GetResultDouble(resultDict, resultName, 0, out found) > 0.5) && found) ? "1" : "0";

				if (!found) break;

				textColor = Android.Graphics.Color.White;
				if (result == "1") textColor = Android.Graphics.Color.Red;

				break;


			case "STATUS_MESSWERTBLOCK_LESEN#STAT_STRECKE_SEIT_ERFOLGREICHER_REGENERATION_WERT": // DPF distance since regeneration
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = string.Format(ActivityMain.Culture, "{0,6:0.0}", value / 1000.0);

				if (!found) break;

				break;

			case "STATUS_MESSWERTBLOCK_LESEN#STAT_PFltRgn_numRgn_WERT": // DPF regeneration request
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = ((value > 3.5) && (value < 6.5) && found) ? "1" : "0";

				if (!found) break;

				break;

			case "STATUS_MESSWERTBLOCK_LESEN#STAT_CoEOM_stOpModeAct_WERT": // DPF regeneration status
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = ((((int) (value + 0.5) & 0x02) != 0) && found) ? "1" : "0";

				if (!found) break;

				break;

			case "STATUS_MESSWERTBLOCK_LESEN#STAT_REGENERATION_BLOCKIERUNG_UND_FREIGABE_WERT": // DPF unblocked
				value  = ActivityMain.GetResultDouble(resultDict, resultName, 0, out found);
				result = ((value < 0.5) && found) ? "1" : "0";

				if (!found) break;

				break;
		}

		return result;
	}
}
			]]>
		</code>
	</page>
</fragment>
