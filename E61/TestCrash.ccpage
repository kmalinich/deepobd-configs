<?xml version="1.0" encoding="utf-8"?>
<fragment xmlns="http://www.holeschak.de/BmwDeepObd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.holeschak.de/BmwDeepObd BmwDeepObd.xsd">
	<page name="tab_test">
		<strings>
			<string name="tab_test">Test</string>
		</strings>
		<strings lang="de">
			<string name="tab_test">Test</string>
		</strings>
		<jobs />
		<code show_warnings="true">
			<![CDATA[
    class PageClass
    {
        private class EdiabasTestJob
        {
            private string sgbdFile;
            private string jobName;
            private string jobArgs;
            private string resultRequests;
            private string[] jobData;

            public EdiabasTestJob(string sgbdFile, string jobName, string jobArgs, string resultRequests, string[] jobData)
            {
                this.sgbdFile = sgbdFile;
                this.jobName = jobName;
                this.jobArgs = jobArgs;
                this.resultRequests = resultRequests;
                this.jobData = jobData;
            }

            public string SgbdFile
            {
                get
                {
                    return sgbdFile;
                }
            }

            public string JobName
            {
                get
                {
                    return jobName;
                }
            }

            public string JobArgs
            {
                get
                {
                    return jobArgs;
                }
            }

            public string ResultRequests
            {
                get
                {
                    return resultRequests;
                }
            }

            public string[] JobData
            {
                get
                {
                    return jobData;
                }
            }
        }

        static private readonly EdiabasTestJob[] testJobList = {
            new EdiabasTestJob("d_motor", "FS_LESEN", string.Empty, "F_ORT_NR;F_ORT_TEXT;F_READY_TEXT;F_READY_NR;F_SYMPTOM_NR;F_SYMPTOM_TEXT;F_VORHANDEN_NR;F_VORHANDEN_TEXT;F_WARNUNG_NR;F_WARNUNG_TEXT",
                new [] {
                    "F_ORT_TEXT",
                    "F_READY_TEXT",
                    "F_SYMPTOM_TEXT",
                    "F_VORHANDEN_TEXT",
                    "F_WARNUNG_TEXT",
                }),
            new EdiabasTestJob("d_motor", "FS_LESEN_DETAIL", "0x4232", "F_UW_KM",
                new [] {
                    "F_UW_KM",
                }),
            new EdiabasTestJob("d_ccc", "FS_LESEN", string.Empty, "F_ORT_NR;F_ORT_TEXT;F_READY_TEXT;F_READY_NR;F_SYMPTOM_NR;F_SYMPTOM_TEXT;F_VORHANDEN_NR;F_VORHANDEN_TEXT;F_WARNUNG_NR;F_WARNUNG_TEXT",
                new [] {
                    "F_ORT_TEXT",
                    "F_READY_TEXT",
                    "F_SYMPTOM_TEXT",
                    "F_VORHANDEN_TEXT",
                    "F_WARNUNG_TEXT",
                }),
            new EdiabasTestJob("d_ehc", "FS_LESEN", string.Empty, "F_ORT_NR;F_ORT_TEXT;F_READY_TEXT;F_READY_NR;F_SYMPTOM_NR;F_SYMPTOM_TEXT;F_VORHANDEN_NR;F_VORHANDEN_TEXT;F_WARNUNG_NR;F_WARNUNG_TEXT",
                new [] {
                    "F_ORT_TEXT",
                    "F_READY_TEXT",
                    "F_SYMPTOM_TEXT",
                    "F_VORHANDEN_TEXT",
                    "F_WARNUNG_TEXT",
                }),
            new EdiabasTestJob("d_ehc", "FS_LESEN_DETAIL", "0x5FB4", "F_UW_KM",
                new [] {
                    "F_UW_KM",
                }),
            new EdiabasTestJob("d_klima", "FS_LESEN", string.Empty, "F_ORT_NR;F_ORT_TEXT;F_READY_TEXT;F_READY_NR;F_SYMPTOM_NR;F_SYMPTOM_TEXT;F_VORHANDEN_NR;F_VORHANDEN_TEXT;F_WARNUNG_NR;F_WARNUNG_TEXT",
                new [] {
                    "F_ORT_TEXT",
                    "F_READY_TEXT",
                    "F_SYMPTOM_TEXT",
                    "F_VORHANDEN_TEXT",
                    "F_WARNUNG_TEXT",
                }),
        };

        private string testResult = string.Empty;
        private int updateCount = 0;

        public void ExecuteJob(EdiabasNet ediabas, ref MultiMap<string, EdiabasNet.ResultData> resultDict, bool firstCall)
        {
            if (firstCall)
            {
                testResult = string.Empty;
                updateCount = 0;
            }

            string resultText = string.Format("Update: {0}\r\n", updateCount++);
            ediabas.TimeMeas = 0;
            long timeDiff = 0;
            foreach (EdiabasTestJob ediabasJob in testJobList)
            {
                try
                {
                    ediabas.ResolveSgbdFile(ediabasJob.SgbdFile);
                }
                catch (Exception ex)
                {
                    string exText = EdiabasNet.GetExceptionText(ex);
                    lock (EdiabasThread.DataLock)
                    {
                        testResult = exText;
                    }
                    Thread.Sleep(1000);
                    return;
                }

                ediabas.ArgString = ediabasJob.JobArgs;
                ediabas.ArgBinaryStd = null;
                ediabas.ResultsRequests = ediabasJob.ResultRequests;

                try
                {
                    long startTime = Stopwatch.GetTimestamp();
                    ediabas.ExecuteJob(ediabasJob.JobName);
                    timeDiff += Stopwatch.GetTimestamp() - startTime;

                    string lineText = string.Empty;
                    List<Dictionary<string, EdiabasNet.ResultData>> resultSets = ediabas.ResultSets;
                    if ((resultSets == null) || (resultSets.Count < 2))
                    {
                        lineText += "-\r\n";
                    }
                    else
                    {
                        int dictIndex = 0;
                        foreach (Dictionary<string, EdiabasNet.ResultData> resultDictLocal in resultSets)
                        {
                            if (dictIndex == 0)
                            {
                                dictIndex++;
                                continue;
                            }

                            string newLineText = string.Empty;
                            foreach (string dataName in ediabasJob.JobData)
                            {
                                EdiabasNet.ResultData resultData;
                                if (resultDictLocal.TryGetValue(dataName.ToUpperInvariant(), out resultData))
                                {
                                    string valueText = string.Empty;
                                    if (resultData.OpData is string)
                                    {
                                        valueText = (string)resultData.OpData;
                                    }
                                    else if (resultData.OpData is Double)
                                    {
                                        valueText = ((Double)resultData.OpData).ToString ();
                                    }
                                    else if (resultData.OpData is Int64)
                                    {
                                        valueText = ((Int64)resultData.OpData).ToString ();
                                    }
                                    else if (resultData.OpData is byte[])
                                    {
                                        byte[] dataArray = (byte[])resultData.OpData;
                                        foreach (byte value in dataArray)
                                        {
                                            valueText += string.Format("{0:X02} ", value);
                                        }
                                    }
                                    newLineText += dataName + ": " + valueText + " ";
                                }
                            }
                            if (newLineText.Length > 0)
                            {
                                newLineText += "\r\n";
                            }
                            lineText += newLineText;
                            dictIndex++;
                        }
                    }
                    resultText += lineText;
                }
                catch (Exception ex)
                {
                    string exText = EdiabasNet.GetExceptionText(ex);
                    lock (EdiabasThread.DataLock)
                    {
                        testResult = exText;
                    }
                    Thread.Sleep(1000);
                    return;
                }
            }
            resultText += string.Format("Zeit: {0}ms, Intern: {1}ms", timeDiff / (Stopwatch.Frequency / 1000), ediabas.TimeMeas / (Stopwatch.Frequency / 1000));

            lock (EdiabasThread.DataLock)
            {
                testResult = resultText;
            }
            Thread.Sleep(20);
        }

        public void UpdateResultList(JobReader.PageInfo pageInfo, MultiMap<string, EdiabasNet.ResultData> resultDict, List<TableResultItem> resultList)
        {
            string resultText;
            lock (EdiabasThread.DataLock)
            {
                resultText = testResult;
            }
            if (!string.IsNullOrEmpty(resultText))
            {
                resultList.Add(new TableResultItem(resultText, null));
            }
        }
    }
				]]>
		</code>
	</page>
</fragment>
